#+title: Microphones
#+author: Johann-Markus Batke
#+date: 2020-02-07
#+setupfile: booast.setup
#+exclude_tags: internal
#+property: header-args:org               :eval export :exports results
#+PROPERTY: header-args:octave :noweb yes :eval no-export

Simulation of microphone capsules and microphone arrays.

#+name: booast setup
#+BEGIN_SRC emacs-lisp
(org-babel-lob-ingest "~/Version/booast/octavetemplates.org")
#+END_SRC

#+RESULTS: booast setup
: 5

* Microphone

A microphone capsule simulation build up step by step. 

** Diaphragm

First we create a sampling grid for the diaphragm.
#+name: setup sampling area
#+BEGIN_SRC octave 
%5 dia.type = 'spot';
%5 dia.pos = [0;0;0];
%5 dia.type = 'circle';
%5 dia.R_disk = 0.006;
%5 dia.N_disk = 20;
dia.type = 'hexagon';
dia.R_disk = 0.006;
#+END_SRC

#+name: calc sampling area
#+BEGIN_SRC octave 
switch dia.type
  case 'spot'
    vr_sam_N = vector(dia.pos, 'cartesian'); % one point
  case 'circle'
    vr_sam_N = positions('circle', dia.N_disk, dia.R_disk); % margin of diaphragm
  case 'hexagon'
    vr_sam_N = positions('hexagon_circle', dia.R_disk, dia.R_disk/6);
  otherwise
    error('unknown config for diaphragm.')
end
#+END_SRC

** Microphone and Sampling positions

setup sampling positions
1. determine microphone positions
2. rotate and translate the sampling areas accordingly
#+name: setup sampling positions
#+BEGIN_SRC octave
%vr_mic_L = positions('soundfieldmic');
vr_mic_L = vector([0,0,0]', 'cartesian');
%vr_mic_L = positions('octomic');
%ans = get(vr_mic_L, 'spherical');
#+END_SRC

#+name: calc sampling positions
#+BEGIN_SRC octave :var S_file="micpositions.png" :noweb yes :results file :var vr_mic_L = positions('soundfieldmic')
%% mic positions
L = numel(vr_mic_L);
r_mic_xyz_L = get(vr_mic_L, 'cartesian');

%% rotate sample points
vr_sam_NL = rotate(vr_sam_N, vr_mic_L);
r_sam_xyz_NL = get(vr_sam_NL, 'cartesian');
size_mic = size(r_sam_xyz_NL); % 3xNxL
N = size_mic(2);

%% translate sample points
for l = 1:L
  r_sam_xyz_NL(1:3, 1:N, l) = r_sam_xyz_NL(1:3, 1:N, l) + r_mic_xyz_L(1:3, l) * ones(1, N);
end
vr_sam_NL = vector(r_sam_xyz_NL, 'cartesian');
#+END_SRC

Lets review the sampling points now:
#+name: show sampling points
#+BEGIN_SRC octave  :var S_file="img/diaphragms.png" :noweb yes :results file 
<<setup sampling area>>
<<calc sampling area>>
<<setup sampling positions>>
<<calc sampling positions>>
figure(1);
plot(vr_sam_NL, '*');
grid('on');
axis(0.01*[-1 1 -1 1 -1 1]);
view([30,40]);
<<save S_file>>
#+END_SRC
#+attr_org: :width 300
#+RESULTS: show sampling points
[[file:img/diaphragms.png]]


** Diffuse Sound Field

Setup a sound field the diaphragm is exposed to. To illustrate the
directivity patterns, we need sound from all directions.
#+name: setup diffuse sound 
#+BEGIN_SRC octave :noweb yes :results file
%% wave numbers 
F = 3; f_F = linspace(80, 8000, F); % Hz 
omega_F = 2*pi*f_F; % Hz 
C_snd = 342; % m/s 
k_F = omega_F/C_snd; % wave number

%% sound field directions, e.g. a 2-sphere
A = 30; theta_A = linspace(0, pi, A);
B = 40; phi_B = linspace(0, 2*pi, B);
vk_AB = vectorgrid(1, theta_A, phi_B, 'spherical');
vk_D = vector(reshape(vk_AB, [A*B, 1]), 'spherical');
D = numel(vk_D);
#+END_SRC

create a sound field as a plane wave (far field)
#+name: calc diffuse sound 
#+BEGIN_SRC octave
p_sam_NLFD = planewave(vr_sam_NL, scale(k_F, vk_D));
#+END_SRC

** Far Sound Field

Setup a far sound source the diaphragm is exposed to. To illustrate the
directivity patterns, we need sound from some directions.
#+name: setup far sound  
#+BEGIN_SRC octave :noweb yes :results file
%% wave numbers 
F = 256; f_F = logspace(1, 5, F); % Hz 
omega_F = 2*pi*f_F; % Hz 
C_snd = 342; % m/s 
k_F = omega_F/C_snd; % wave number

%% sound field directions, e.g. a 2-sphere
A = 1; theta_A = linspace(pi/2, pi/2, A);
B = 5; phi_B = linspace(0, pi, B);
vk_AB = vectorgrid(1, theta_A, phi_B, 'spherical');
vk_D = vector(reshape(vk_AB, [A*B, 1]), 'spherical');
D = numel(vk_D);
#+END_SRC

create a far field as a plane wave (far field)
#+name: calc far sound
#+BEGIN_SRC octave
p_sam_NLFD = planewave(vr_sam_NL, scale(k_F, vk_D));
#+END_SRC

test this
#+BEGIN_SRC octave :noweb yes :session farsound
clear all;
<<setup sampling area>>
<<calc sampling area>>
<<setup sampling positions>>
<<calc sampling positions>>
<<setup far sound>>
<<calc far sound>>
ans = size(p_sam_NLFD)
#+END_SRC

#+RESULTS:
| 130 | 1 | 256 | 5 |

** Capsule properties

Directional properties are controlled by =alpha=.

| alpha | pattern                          |
|-------+----------------------------------|
|     1 | omnidirectional, pressure sensor |
|     0 | figure of 8, velocity sensor     |
|   0.5 | cardioid                         |
|       |                                  |

#+name: setup capsule
#+BEGIN_SRC octave   :noweb yes :results file
%% weighting for radial portion of velocity
alpha = 0.5;
#+END_SRC

So we expose the sampling points to this soundfield and sum up all sampling points per capsule.

Do the microphone modelling (by adding pressure and velocity) AKA directivity pattern according to alpha.
#+name: calc capsule
#+BEGIN_SRC octave 
%% add pressure and velocity
G_DL = radial_weight(vk_D, vr_mic_L);
F = size(p_sam_NLFD, 3);
N = size(p_sam_NLFD, 1);
s_sam_NLFD = zeros(size(p_sam_NLFD));
for l = 1:L
  for d = 1:size(G_DL, 1)
    s_sam_NLFD(1:N,l,1:F,d) = (alpha + (1-alpha) * G_DL(d,l)) .* ...
			  p_sam_NLFD(1:N, l, 1:F, d);
  end
end

%% summarise sample points, discard leading dimension 1, reshape
s_sam_LFD = permute(sum(s_sam_NLFD, 1), [2, 3, 4, 1]);
#+END_SRC


test this
#+BEGIN_SRC octave :noweb yes :session microphones_farsound
clear all;
<<setup sampling area>>
<<calc sampling area>>
<<setup sampling positions>>
<<calc sampling positions>>
<<setup far sound>>
<<calc far sound>>
<<setup capsule>>
<<calc capsule>>
ans = size(s_sam_LFD)
#+END_SRC

#+RESULTS:
| 1 | 256 | 5 |

** Directivity pattern

*** polar pattern 2D


*** polar pattern 3D

setup display the polar pattern
#+name: setup capsule polar
#+BEGIN_SRC octave  :noweb yes :results silent :session microphones_polar
<<setup sampling area>>
<<calc sampling area>>
<<setup sampling positions>>
<<calc sampling positions>>
<<setup diffuse sound>>
<<calc diffuse sound>>
<<setup capsule>>
<<calc capsule>>
#+END_SRC


display frequency =f=1= and capsule =l=1=
#+name: display capsule polar
#+BEGIN_SRC octave  :var S_file="img/micpatterns.png" f = 1 l = 1 :noweb yes :results file :session microphones_polar
%% reorder for display
L = size(s_sam_LFD, 1);
F = size(s_sam_LFD, 2);
s_sam_LFAB = reshape(s_sam_LFD, [L, F, A, B]);

%% prepare translated vectorgrids
[x_AB, y_AB, z_AB] = meshgrid(vk_AB); 

figure(1); clf;
%% get l th capsules signal
s_AB = abs(real(squeeze(s_sam_LFAB(l, f, :, :))));

surface(vk_AB, s_AB.', [], 'dependendSurface');
view([30, 40]);
axis('equal');
# else
#   for l = 1:L
#     subplot(2, L, l);
#     surface(vg_AB, s_AB.', [], 'dependendSurface');
#     view([30, 40]);
#     axis('equal');
#     
#     subplot(2, 1, 2);
#     hold('on');
#   	  % surface(vg_AB, abs(real(s_AB.')), [], 'dependendSurface');
#     %% translate the grid and draw surfaces
#     a = 0.0005;
#   
#     surface(r_mic_xyz_L(1,l) + a * s_AB .* squeeze(x_AB), ...
#   	  r_mic_xyz_L(2,l) + a * s_AB .* squeeze(y_AB), ...
#   	  r_mic_xyz_L(3,l) + a * s_AB .* squeeze(z_AB), ...
#             s_AB, ...
#             'EdgeColor','black');
#     view([30, 40]);
#     axis('equal');
#   end
# end
<<save S_file>>
#+END_SRC
#+attr_org: :width 300
#+RESULTS: display capsule polar
[[file:org_babel_eoe]]

** Frequency response

setup frequency response
#+name: setup frequency response
#+BEGIN_SRC octave :noweb yes :results silent :session microphones_farsound
<<setup sampling area>>
<<calc sampling area>>
<<setup sampling positions>>
<<calc sampling positions>>
<<setup far sound>>
<<calc far sound>>
<<setup capsule>>
<<calc capsule>>
#+END_SRC


display capsule =l=
#+name: display frequency response
#+BEGIN_SRC octave  :var S_file="img/micfrequency.png" l = 1 :noweb yes :results file :session microphones_farsound
s_sam_dB_FD = 20*log10(real(squeeze(s_sam_LFD(l,:,:))));
figure(1); clf;
semilogx(f_F, s_sam_dB_FD);
xlabel('f/Hz');
ylabel('A/dB');
title('Capsule response - directions');
<<save S_file>>
#+END_SRC
#+attr_org: :width 300
#+RESULTS: display frequency response
[[file:img/micfrequency.png]]

** Octave definition of capsule.m

summarize to function capsule

#+name: def capsule
#+BEGIN_SRC octave :tangle capsule.m :noweb yes
function [s_sam_LFD] = capsule(vr_mic_L, k_F, vk_D, alpha, dia)
 % capsule - simulates capsules exposed to a plane wave
 %
<<calc sampling area>>
<<calc sampling positions>>
<<calc diffuse sound>>
<<calc capsule>>
#+END_SRC

#+RESULTS: def capsule

#+name: test capsule 
#+BEGIN_SRC octave :noweb yes :results output 
<<setup sampling area>>
<<setup sampling positions>>
<<setup diffuse sound>>
<<setup capsule>>
s_sam_LFD = capsule(vr_mic_L, k_F, vk_D, alpha, dia);
whos;
#+END_SRC

#+RESULTS: test capsule
#+begin_example
Variables visible from the current scope:

variables in scope: top scope

   Attr Name           Size                     Bytes  Class
   ==== ====           ====                     =====  ===== 
        A              1x1                          8  double
        B              1x1                          8  double
        C_snd          1x1                          8  double
        D              1x1                          8  double
        F              1x1                          8  double
        alpha          1x1                          8  double
        dia            1x1                         15  struct
        f_F            1x3                         24  double
        k_F            1x3                         24  double
        omega_F        1x3                         24  double
        phi_B          1x40                       320  double
   c    s_sam_LFD      1x3x1200                 57600  double
        theta_A        1x30                       240  double
        vg_AB          1x30x40                    585  vectorgrid
        vk_D        1200x1                      28833  vector
        vr_mic_L       1x1                         57  vector

Total is 3689 elements using 87770 bytes

#+end_example


*** polar pattern 2D

#+name: setup far sound equator 
#+BEGIN_SRC octave :noweb yes :results file
%% wave numbers 
f_F = [100, 500, 1000, 5000, 10000]; % Hz
F = length(f_F);
omega_F = 2*pi*f_F; % Hz 
C_snd = 342; % m/s 
k_F = omega_F/C_snd; % wave number

%% sound field directions, e.g. a 2-sphere
A = 1; theta_A = linspace(pi/2, pi/2, A);
B = 256; phi_B = linspace(0, 2*pi, B);
vg_AB = vectorgrid(1, theta_A, phi_B, 'spherical');
vk_D = vector(reshape(vg_AB, [A*B, 1]), 'spherical');
D = numel(vk_D);
#+END_SRC


#+name: test capsule polar 2D
#+BEGIN_SRC octave :noweb yes :results silent  :session test
clear all;
<<setup sampling area>>
<<setup sampling positions>>
<<setup far sound equator>>
<<setup capsule>>
alpha = .1
s_sam_LFD = capsule(vr_mic_L, k_F, vk_D, alpha, dia);
#+END_SRC

#+name: display capsule polar 2D
#+BEGIN_SRC octave  :noweb yes :results file :var S_file = "img/capsule_fun_polar_2D.png" l = 1 f = 1 :session test
%% reorder for display
L = size(s_sam_LFD, 1);
F = size(s_sam_LFD, 2);
s_sam_LFAB = reshape(s_sam_LFD, [L, F, A, B]);
s_sam_FB = squeeze(real(s_sam_LFAB(l, :, 1, :)));
figure(1); clf;
polar(phi_B, abs(s_sam_FB)/max(max(s_sam_FB)));
xlabel('f/Hz');
ylabel('A/dB');
<<save S_file>>
#+END_SRC
#+attr_org: :width 300
#+RESULTS: display capsule polar 2D
[[file:img/capsule_fun_polar_2D.png]]

*** Polar pattern 3D

#+name: test capsule polar
#+BEGIN_SRC octave :noweb yes :results file :var S_file = "img/capsule_fun_polar.png" l = 1 f = 1
<<setup sampling area>>
<<setup sampling positions>>
<<setup diffuse sound>>
#<<setup capsule>>
alpha = .1
s_sam_LFD = capsule(vr_mic_L, k_F, vk_D, alpha, dia);
<<display capsule polar>>
#+END_SRC
#+attr_org: :width 300
#+RESULTS: test capsule polar
[[file:img/capsule_fun_polar.png]]

*** Frequency response

#+name: test capsule frequency
#+BEGIN_SRC octave :noweb yes :results file :var S_file = "img/capsule_fun_frequency.png" l = 1 :session test
<<setup sampling area>>
<<setup sampling positions>>
<<setup far sound>>
#<<setup capsule>>
alpha = .1
s_sam_LFD = capsule(vr_mic_L, k_F, vk_D, alpha, dia);
<<display frequency response>>
#+END_SRC
#+attr_org: :width 300
#+RESULTS: test capsule frequency
[[file:img/capsule_fun_frequency.png]]

* Microphone arrays

All important types of microphone arrays for use with HOA are
discussed by cite:poletti05_three_dimen_surroun_sound_system.

** Free-field sphere array response

The free-field sphere is referred to as "open sphere".

file:arrayresponse_freefield.m: calculates something for given argument

*** Octave definition                                              :internal:

see [[Cite:poletti05_three_dimen_surroun_sound_system]] eq. (16)
#+BEGIN_SRC octave :tangle arrayresponse_freefield.m
<<arrayresponse_freefield doc[:results ascii :post octave comment(s=*this*)]()>>
<<copyright>>
function M_OF = arrayresponse_freefield(N_order, R_mic, k_F, alpha)
  
J_OF   = squeeze(sphericalbessel(N_order, R_mic * k_F));
J_r_OF = squeeze(sphericalbessel_r(N_order, R_mic * k_F));

% Array-Antwort 
M_OF = alpha * J_OF - i * (1-alpha) * J_r_OF;
#+END_SRC

*** Interface test                                                 :internal:

#+BEGIN_SRC octave :results output
N_order = 4;
R_mic = 1;
k_F = linspace(20, 20000, 200);
alpha = 0.5;
M_OF = arrayresponse_freefield(N_order, R_mic, k_F, alpha);
whos
#+END_SRC

#+RESULTS:

*** Documentation                                                     :ignore:

#+name: array response
#+BEGIN_SRC octave :var S_file="img/arrayresponse_freefield.png" :results file
N_order = 3;
R_mic = 0.001;
k_F = logspace(1, 5, 500);
alpha = 0.5;
M_OF = arrayresponse_freefield(N_order, R_mic, k_F, alpha);
figure(1);
semilogx(k_F, 20*log10(abs(M_OF)));
xlim([20 20000]);
xlabel('Frequency (Hz)');
ylabel('Amplitude (dB)');
grid('on');
<<save S_file>>
#+END_SRC
#+attr_org: :width 600
#+RESULTS: array response
[[file:img/arrayresponse_freefield.png]]


#+name: arrayresponse_freefield doc
#+BEGIN_SRC org
,*** Syntax

,*** Description

,*** Input Arguments

,*** Return Values

,*** Examples

,*** Tips

,*** Alternatives

,*** See Also
#+END_SRC

#+call: arrayresponse_freefield doc[:output html]()

** Rigid sphere array response
tbd

* HOA coefficients measured by microphone arrays
we use a session =freqresp= here.

** Microphone array investigations

*** Microphone array setup

we use a tetrahedral setup for testing purposes.

#+name: setup sampling area tetrahedral
#+BEGIN_SRC octave 
% dia.type = 'spot';
% dia.pos = [0;0;0];
dia.type = 'circle';
dia.R_disk = 0.006;
dia.N_disk = 20;
%dia.type = 'hexagon';
%dia.R_disk = 0.006;
#+END_SRC

#+name: setup sampling positions tetrahedral
#+BEGIN_SRC octave  :tangle mkexa_frequencyresponses.m :session freqresp
%% Positionen der sim. Mik.-Kapselen
%L_pos = 9; R_pos = 0.0147; [vr_mic_L, G_L] = positions('sphere', L_pos);
vr_mic_L = positions('octomic');  L_pos = 8; G_L = ones(L_pos, 1); R_pos = 0.023;
vr_mic_L = scale(R_pos, vr_mic_L);
#+END_SRC

#+name: setup capsule tetrahedral
#+BEGIN_SRC octave   :noweb yes :results file
%% weighting for radial portion of velocity
alpha = 0.5;
#+END_SRC

*** A-format

create a far field with various directions

let us look at the capsules' signals (a-format)

#+name: setup tetrahedral a-format
#+BEGIN_SRC octave :noweb yes :session microphones_afmt :results silent
clear all;
<<setup sampling area tetrahedral>>
<<setup sampling positions tetrahedral>>
<<setup far sound>>
<<setup capsule tetrahedral>>
s_sam_LFD = capsule(vr_mic_L, k_F, vk_D, alpha, dia);
#+END_SRC

observation
- loss of high frequencies due to capsules' size
- notches at $\lambda / 2$ for diameter of array due to fixed phase relation of the observed impinging wave
- different levels due to the directivity pattern of the spatially rotated capsules  

#+name: display frequency response per direction
#+BEGIN_SRC octave :noweb yes :results file :var S_file = "img/tetrahedral_a-format.png" d = 5 :session microphones_afmt
s_sam_dB_LF = 20*log10(real(squeeze(s_sam_LFD(:,:,d))));
figure(1); clf;
semilogx(f_F, s_sam_dB_LF);
xlabel('f/Hz');
ylabel('A/dB');
%% setup labels
L_pos = size(s_sam_dB_LF, 1);
f_pos_L = logspace(1, 4, L_pos);
for l = 1:L_pos
  i_pos_L(l) = find(f_F <= f_pos_L(l), 1, 'last');
  S_pos_L{l} = sprintf('C%i', l);
end
V_dco = get(gca, 'ColorOrder');    
for l = 1:L_pos
  text(f_pos_L(l), ...
       s_sam_dB_LF(l, i_pos_L(l)) + 1, ...
       S_pos_L{l}, ...
       %'FontName', S_fontname, ...
       %'FontSize', N_fontsize, ...
       'BackgroundColor',[1 1 1], ...
       'EdgeColor', V_dco(mod(l-1,7)+1,:));
end
grid('on');
<<save S_file>>
#+END_SRC
#+attr_org: :width 600
#+RESULTS: display frequency response per direction
[[file:img/tetrahedral_a-format.png]]

*** B-format

**** HOA 
#+name: setup HOA
#+BEGIN_SRC octave 
%% setup HOA
N_order = 2;
O_amb = (N_order+1)^2;
S_norm = 'norm';
S_type = 'real';
#+END_SRC

**** setup labels
#+name: setup labels
#+BEGIN_SRC octave 
S_fontname = 'Helvetica'; 
N_fontsize = 6;
dB_min = -60;
dB_max = 20;
F_min = 10;
F_max = 100000;
axis([F_min F_max dB_min dB_max]);
#+END_SRC

#+RESULTS: setup labels

**** hoa labels
#+name: setup hoalabel
#+BEGIN_SRC octave   
%% HOA-Namen
%% (N_order)
for n = 0:N_order
  for m = -n:n
    o = n^2+n+m+1;
    S_hoalabel{o} = sprintf('A_%i^{%i}', n, m);
  end
end

%% angezeigte Ordnungen 
if N_order == 0
  o_disp = 1;
else
  % o_disp = [n^2+1:(n+1)^2]; % all m per order n
  o_disp = 1:(n+1)^2; % all n
end

%% setze Absissen-Werte für Etiketten
f_hoa_O = logspace(2, 4, length(o_disp));
for oo = 1:length(o_disp)
  i_hoa_O(oo) = find(f_F <= f_hoa_O(oo), 1, 'last');
end
#+END_SRC

***** simulation labels

expects A_sim_dB_OFD
#+name: simulation labels
#+BEGIN_SRC octave
<<setup hoalabel>>
%% array simulated labels
V_dco = get(gca, 'ColorOrder');    
oo = 0;
for o = o_disp
  oo = oo + 1;
  if A_sim_dB_OFD(o, i_hoa_O(oo),d) < dB_min
    A_sim_dB = dB_min;
  elseif A_sim_dB_OFD(o, i_hoa_O(oo),d) > dB_max
    A_sim_dB = dB_max-5;
  else
    A_sim_dB = A_sim_dB_OFD(o, i_hoa_O(oo),d);
  end
  text(f_hoa_O(oo)+1, ...
       A_sim_dB + 3, ...
       S_hoalabel{o}, ...
       'FontName', S_fontname, ...
       'FontSize', N_fontsize, ...
       'BackgroundColor',[1 1 1], ...
       'EdgeColor', V_dco(mod(oo-1,7)+1,:));
  text(F_min+50, dB_max-20, 'simul.', ...
       'FontName', S_fontname, ...
       'FontSize', N_fontsize, ...
       'BackgroundColor',[1 1 1], ...
       'EdgeColor', [0,0,0]); 
end
#+END_SRC

***** theoretical labels

expects A_hoa_dB_OFD
#+name: theoretical labels
#+BEGIN_SRC octave
<<setup hoalabel>>
%% theoretical labels
V_dco = get(gca, 'ColorOrder');    
oo = 0;
for o = o_disp
  oo = oo+1;
  if A_hoa_dB_OFD(o, i_hoa_O(oo),d) < dB_min
      A_hoa_dB = dB_min;
  elseif A_hoa_dB_OFD(o, i_hoa_O(oo),d) > dB_max
    A_hoa_dB = dB_max-5;
  else
    A_hoa_dB = A_hoa_dB_OFD(o, i_hoa_O(oo),d);
  end
  text(f_hoa_O(oo), ...
       A_hoa_dB + 1, ...
       S_hoalabel{o}, ...
       'FontName', S_fontname, ...
       'FontSize', N_fontsize, ...
       'BackgroundColor',0.8*[1 1 1], ...
       'EdgeColor', V_dco(mod(oo-1,7)+1,:));
end
text(F_min+5, dB_max-20, 'theory', ...
     'FontName', S_fontname, ...
     'FontSize', N_fontsize, ...
     'BackgroundColor',0.8*[1 1 1], ...
     'EdgeColor', [0,0,0]);
#+END_SRC


**** HOA array response
#+name: calc HOA opensphere response
#+BEGIN_SRC octave 
%% calc array response opensphere
M_OF = arrayresponse_freefield(N_order, R_pos, k_F, alpha);
%M_ON = diag(M_ON(:,1))*ones(O_amb, N_dft);
#+END_SRC

#+name: setup HOA opensphere response
#+BEGIN_SRC octave :session microphones_bfmt :results silent
clear all;
<<setup HOA>>
<<setup sampling positions tetrahedral>>
<<setup capsule tetrahedral>>
<<setup far sound>>
<<calc HOA opensphere response>>
#+END_SRC

#+RESULTS: setup HOA opensphere response

#+name: display HOA opensphere response
#+BEGIN_SRC octave  :var S_file="img/array_freq_resp_open.png" :results file :session microphones_bfmt
figure(1); clf;
%M_ON = M_ON/max(max(abs(M_ON)));
semilogx(f_F, 20*log10(abs(M_OF).'));
xlabel('Frequency (Hz)');
ylabel('Level (dB)');
grid('on');
<<setup labels>>
F_min = 10;
F_max = 100000;
dB_min = -30; dB_max = 0; axis([F_min F_max dB_min dB_max]);
<<save S_file>>
#+END_SRC
#+attr_org: :width 600
#+RESULTS: display HOA opensphere response
[[file:img/array_freq_resp_open.png]]

**** HOA theoretical

#+name: setup HOA theoretical
#+BEGIN_SRC octave :session microphones_bfmt :results silent
clear all;
<<setup HOA>>
<<setup far sound>>
#+END_SRC


#+name: calc HOA theoretical
#+BEGIN_SRC octave :session microphones_bfmt
k_rtp_D = get(vk_D, 'spherical');
Theta_D = k_rtp_D(2, :);
Phi_D   = k_rtp_D(3, :);
A_hoa_OFD = zeros(O_amb, F, D);
for d = 1:D
  A_hoa_OFD(:,:,d) = sphericalseries_hoa_plane(N_order, ...
                                               Theta_D(d), ...
                                               Phi_D(d), ...
                                               S_norm, S_type, F);
end
ans = size(A_hoa_OFD);
#+END_SRC

#+RESULTS: calc HOA theoretical
| 9 | 256 | 5 |


#+name: display HOA theoretical
#+BEGIN_SRC octave :session microphones_bfmt :results file :var d_disp = 2 S_file="img/theoretical_HOA_freqresp.png"
A_hoa_OFD = A_hoa_OFD / abs(A_hoa_OFD(1, 1, 1));
A_hoa_dB_OFD = 20*log10(abs(A_hoa_OFD));
figure(1); clf;
semilogx(f_F, A_hoa_dB_OFD(:,:,d_disp)', '-');
<<setup labels>>
<<theoretical labels>>
S_title = sprintf('N = %i, \\theta = %.1f deg, \\phi = %.1f deg', ...
		  n, Theta_D(d_disp)*180/pi, Phi_D(d_disp)*180/pi);
title(S_title);
xlabel('Frequency (Hz)');
ylabel('Level (dB)');
grid('on');
%axis([F_min F_max dB_min dB_max]);
<<save S_file>>
#+END_SRC
#+attr_org: :width 300
#+RESULTS: display HOA theoretical
[[file:img/theoretical_HOA_freqresp.png]]

#+attr_org: :width 600

**** HOA coefficients frequencies

#+name: setup HOA simulation
#+BEGIN_SRC octave :session microphones_bfmt :results silent
clear all;
%% setup a-format
<<setup sampling area tetrahedral>>
<<setup sampling positions tetrahedral>>
<<setup far sound>>
<<setup capsule tetrahedral>>
s_sam_LFD = capsule(vr_mic_L, k_F, vk_D, alpha, dia);
%% setup b-format
<<setup HOA>>
<<calc HOA opensphere response>>
<<calc HOA theoretical>>
#+END_SRC

#+RESULTS: setup HOA simulation
| 9 | 3 | 1200 |

#+name: calc HOA simulation
#+BEGIN_SRC octave :session microphones_bfmt
%% Modenmatrix
r_mic_rtp_L = get(vr_mic_L, 'spherical');
Psi_OL = sphericalmodematrix(N_order, ...
                             r_mic_rtp_L(2,:), ...
                             r_mic_rtp_L(3,:), ...
                             S_norm, S_type);
%% HOA coefficients from array
A_sim_OFD = zeros(O_amb, F, D);
for f = 1:F
  for d = 1:D
    A_sim_OFD(:,f,d) = M_OF(:,f).^(-1) .* ... % Filterfunktion
		       (Psi_OL * ...
			(G_L .* s_sam_LFD(:,f,d))); % gew. Mikrofonsignale
  end
end
%% ((sin(r_mic_rtp_L(2, :)).' .* ... % sin(theta)-Term aus Integral

#+END_SRC

#+RESULTS: calc HOA simulation
: org_babel_eoe


#+BEGIN_SRC octave :session microphones_bfmt
<<setup HOA simulation>>
<<calc HOA simulation>>
#+END_SRC

#+RESULTS:
| 9 | 256 | 5 |

#+name: display HOA simulation freq
#+BEGIN_SRC octave :session microphones_bfmt :results file :var d_disp = 1 S_file="img/simulation_HOA_freqresp.png"
figure(1); clf;
%% theoretical values for reference
hold('off');
A_hoa_OFD = A_hoa_OFD / abs(A_hoa_OFD(1, 1, 1));
A_hoa_dB_OFD = 20*log10(abs(A_hoa_OFD));
h = semilogx(f_F, A_hoa_dB_OFD(:,:,d_disp)', '--');
set(gca, 'ColorOrder', circshift(get(gca, 'ColorOrder'), numel(h)));
<<setup labels>>
<<theoretical labels>>
S_title = sprintf('N = %i, \\theta = %.1f deg, \\phi = %.1f deg', ...
		  n, Theta_D(d_disp)*180/pi, Phi_D(d_disp)*180/pi);
title(S_title);
xlabel('Frequency (Hz)');
ylabel('Level (dB)');
grid('on');
%% simlation values
hold('on');
A_sim_OFD = A_sim_OFD / abs(A_sim_OFD(1, 1, 1));
A_sim_dB_OFD = 20*log10(abs(A_sim_OFD));
semilogx(f_F, A_sim_dB_OFD(:,:,d_disp)', '-');
<<setup labels>>
<<simulation labels>>
xlabel('Frequency (Hz)');
ylabel('Level (dB)');
grid('on');
%axis([F_min F_max dB_min dB_max]);
<<save S_file>>
#+END_SRC
#+attr_org: :width 600
#+RESULTS: display HOA simulation freq
[[file:img/simulation_HOA_freqresp.png]]

**** HOA coefficients directivity

#+name: setup HOA simulation dir
#+BEGIN_SRC octave :session microphones_bfmt_dir

%% setup a-format
<<setup sampling area tetrahedral>>
<<setup sampling positions tetrahedral>>
<<setup diffuse sound>>
<<setup capsule tetrahedral>>
s_sam_LFD = capsule(vr_mic_L, k_F, vk_D, alpha, dia);
%% setup b-format
<<setup HOA>>
<<calc HOA opensphere response>>
<<calc HOA theoretical>>
<<calc HOA simulation>>
#+END_SRC

#+RESULTS: setup HOA simulation dir
| 9 | 3 | 1200 |

#+RESULTS: setup HOA simulation
| 4 | 256 | 5 |


define a plot routine for subplots in HOA triangle manner
#+name: plot HOA directions
#+BEGIN_SRC octave
figure(1); clf;
for n = 0:N_order
  for m = -n:n
    o = n^2+n+m+1;
    subplot(N_order + 1, 2*N_order + 1, (N_order+1)+n*(2*N_order+1)+m);
    A_AB = squeeze(A_sim_OFAB(o, n_disp, :, :));
    %surface(pg_CAB, abs(real(Y_AB.')), sign(real(Y_AB.')), 'dependendSurface');
    surface(vk_AB, abs(A_AB.'), [], 'dependendSurface');
    % xlabel('x');
    % ylabel('y');
    %zlabel('z');
    title(sprintf('A_%i^{%i}', n, m));
    view([30 40]);
    grid('on');
    axis('equal');
    axis('nolabel');
  end
end
#+END_SRC

#+RESULTS: plot HOA directions



#+name: display HOA simulation dir
#+BEGIN_SRC octave :session microphones_bfmt_dir :results file :var n_disp = 3 S_file="img/simulation_HOA_dirresp.png"
A_sim_OFAB = reshape(A_sim_OFD, [O_amb, F, A, B]);
<<plot HOA directions>>
<<save S_file>>
#+END_SRC
#+attr_org: :width 600
#+RESULTS: display HOA simulation dir
[[file:img/simulation_HOA_dirresp.png]]

#+attr_org: :width 600
#+RESULTS: display HOA simulation
[[file:img/simulation_HOA_dirresp.png]]



